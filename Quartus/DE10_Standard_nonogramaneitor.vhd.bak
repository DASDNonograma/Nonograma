library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity DE10_Standard_nonogramaneitor is
 port(
	-- CLOCK ----------------
	CLOCK_50	: in	std_logic;
--	CLOCK2_50	: in	std_logic;
--	CLOCK3_50	: in	std_logic;
--	CLOCK4_50	: in	std_logic;
	-- KEY ----------------
	KEY 		: in	std_logic_vector(0 downto 0);
--	KEY 		: in	std_logic_vector(3 downto 0);
	-- LEDR ----------------
--	LEDR 		: out	std_logic_vector(9 downto 0);
	-- SW ----------------
	SW 			: in	std_logic_vector(9 downto 0);
	-- GPIO-LT24-UART ----------
	-- LCD --
   LT24_LCD_ON 	: out	std_logic;
   LT24_RESET_N	: out	std_logic;
   LT24_CS_N		: out	std_logic;
   LT24_RD_N		: out	std_logic;
   LT24_RS			: out	std_logic;
   LT24_WR_N		: out	std_logic;
   LT24_D			: out	std_logic_vector(15 downto 0)
	-- Touch --
-- LT24_ADC_PENIRQ_N	: in	std_logic;
-- LT24_ADC_DOUT		: in	std_logic;
-- LT24_ADC_BUSY		: in	std_logic;
-- LT24_ADC_DIN		: out	std_logic;
-- LT24_ADC_DCLK		: out	std_logic;
-- LT24_ADC_CS_N		: out	std_logic;
	-- UART --
--	UART_RX		: in	std_logic;
	-- GPIO default ----------------
--	GPIO 		: inout	std_logic_vector(35 downto 0);
	-- CODEC Audio ----------------
--	AUD_ADCDAT	: in	std_logic;
--	AUD_ADCLRCK	: in	std_logic;
--	AUD_BCLK	: in	std_logic;
--	AUD_DACDAT	: out	std_logic;
--	AUD_DACLRCK	: in	std_logic;
--	AUD_XCK		: out	std_logic;
	-- I2C for Audio and Video-In ----------------
--	FPGA_I2C_SCLK	: out	std_logic;
--	FPGA_I2C_SDAT	: inout	std_logic;
	-- SDRAM ----------------
--	DRAM_ADDR	: out	std_logic_vector(12 downto 0);
--	DRAM_BA		: out	std_logic_vector(1 downto 0);
--	DRAM_CAS_N	: out	std_logic;
--	DRAM_CKE	: out	std_logic;
--	DRAM_CLK	: out	std_logic;
--	DRAM_CS_N	: out	std_logic;
--	DRAM_DQ		: inout	std_logic_vector(15 downto 0);
--	DRAM_LDQM	: out	std_logic;
--	DRAM_RAS_N	: out	std_logic;
--	DRAM_UDQM	: out	std_logic;
--	DRAM_WE_N	: out	std_logic;
	-- 7-SEG ----------------
--	HEX0	: out	std_logic_vector(6 downto 0);
--	HEX1	: out	std_logic_vector(6 downto 0);
--	HEX2	: out	std_logic_vector(6 downto 0);
--	HEX3	: out	std_logic_vector(6 downto 0);
--	HEX4	: out	std_logic_vector(6 downto 0);
--	HEX5	: out	std_logic_vector(6 downto 0);
	-- ADC ----------------
--	ADC_CS_N	: out	std_logic;
--	ADC_DIN		: out	std_logic;
--	ADC_DOUT	: in	std_logic;
--	ADC_SCLK	: out	std_logic;
	-- HSMC default ------------------
-- HSMC_CLKIN0     	:in    	std_logic;
-- HSMC_CLKIN_N1   	:in    	std_logic;
-- HSMC_CLKIN_N2   	:in    	std_logic;
-- HSMC_CLKIN_P1   	:in    	std_logic;
-- HSMC_CLKIN_P2   	:in    	std_logic;
-- HSMC_CLKOUT0    	:out   	std_logic;
-- HSMC_CLKOUT_N1  	:out   	std_logic;
-- HSMC_CLKOUT_N2  	:out   	std_logic;
-- HSMC_CLKOUT_P1  	:out   	std_logic;
-- HSMC_CLKOUT_P2  	:out   	std_logic;
-- HSMC_D          	:inout 	std_logic_vector(3 downto 0);
-- HSMC_RX_D_N     	:inout 	std_logic_vector(16 downto 0);
-- HSMC_RX_D_P     	:inout 	std_logic_vector(16 downto 0);
-- HSMC_SCL        	:out   	std_logic;
-- HSMC_SDA        	:inout 	std_logic;
-- HSMC_TX_D_N     	:inout 	std_logic_vector(16 downto 0);
-- HSMC_TX_D_P     	:inout 	std_logic_vector(16 downto 0);
	-- IRDA ----------------
--	IRDA_RXD	: in	std_logic;
--	IRDA_TXD	: out	std_logic;
	-- PS2 ----------------
--	PS2_CLK		: in	std_logic;
--	PS2_CLK2	: in	std_logic;
--	PS2_DAT		: inout	std_logic;
--	PS2_DAT2	: inout	std_logic;
	-- Video-In ----------------
--	TD_CLK27	: in	std_logic;
--	TD_DATA		: in	std_logic_vector(7 downto 0);
--	TD_HS		: in	std_logic;
--	TD_RESET_N	: out	std_logic;
--	TD_VS		: in	std_logic;
	-- VGA ----------------
--	VGA_B		: out	std_logic_vector(7 downto 0);
--	VGA_BLANK_N	: out	std_logic;
--	VGA_CLK		: out	std_logic;
--	VGA_G		: out	std_logic_vector(7 downto 0);
--	VGA_HS		: out	std_logic;
--	VGA_R		: out	std_logic_vector(7 downto 0);
--	VGA_SYNC_N	: out	std_logic;
--	VGA_VS		: out	std_logic;	: out	std_logic
); -- ***OJO*** ultimo de la lista sin ;

end;

architecture rtl of DE10_Standard_nonogramaneitor is 
	signal clk, reset, reset_l   : std_logic;

	signal ciclos: unsigned (18 downto 0);
	signal posi : unsigned (7 downto 0);
	signal tic1, tic2: std_logic;
   	signal d: unsigned (15 downto 0);
	signal rgb : unsigned (15 downto 0);
	signal YROW_l : unsigned (8 downto 0);
	signal numpix_l : unsigned (16 downto 0);
	signal cs_n, wr_n, rs, init_done : std_logic;
	
component lcd_ctrl_ent 
  port (
	clk,reset:  in std_logic;

  -- In
  LCD_init_done, OP_SETCURSOR, OP_DRAWCOLOUR:   in std_logic;
  XCOL:                                         in unsigned ( 7 downto 0);
  YROW:                                         in unsigned ( 8 downto 0);
  RGB:                                          in unsigned ( 15 downto 0);
  NUM_PIX:                                      in unsigned ( 16 downto 0);
  
  -- Out

  DONE_CURSOR, DONE_COLOUR, LCD_CS_N, LCD_WR_N, LCD_RS:   out std_logic;
  LCD_DATA:                                               out unsigned ( 15 downto 0)
	
  );
end component;


component LT24Setup
 port(
      -- CLOCK and Reset_l ----------------
      clk            : in      std_logic;
      reset_l        : in      std_logic;

      LT24_LCD_ON      : out std_logic;
      LT24_RESET_N     : out std_logic;
      LT24_CS_N        : out std_logic;
      LT24_RS          : out std_logic;
      LT24_WR_N        : out std_logic;
      LT24_RD_N        : out std_logic;
      LT24_D           : out std_logic_vector(15 downto 0);

      LT24_CS_N_Int        : in std_logic;
      LT24_RS_Int          : in std_logic;
      LT24_WR_N_Int        : in std_logic;
      LT24_RD_N_Int        : in std_logic;
      LT24_D_Int           : in std_logic_vector(15 downto 0);
      
      LT24_Init_Done       : out std_logic
 );
end component;


	
	
begin
	clk <= CLOCK_50;
	reset_l <= KEY(0);
	reset <= not(KEY(0));
	
	setup: LT24Setup port map (
	    -- CLOCK and Reset_l ----------------
      clk => clk,           
      reset_l => reset_l,       

      LT24_LCD_ON => LT24_LCD_ON,     
      LT24_RESET_N  => LT24_RESET_N,    
      LT24_CS_N => LT24_CS_N,       
      LT24_RS => LT24_RS,         
      LT24_WR_N => LT24_WR_N,       
      LT24_RD_N => LT24_RD_N,        
      LT24_D => LT24_D,           


      LT24_CS_N_Int => cs_n,        
      LT24_RS_Int => rs,          
      LT24_WR_N_Int => wr_n,        
      LT24_RD_N_Int => '1',        
      LT24_D_Int => std_logic_vector(d),           
      
      LT24_Init_Done=> init_done       
	);


  rgb <= (15 downto 11 => SW(2), 10 downto 5 => SW(1), 4 downto 0 => SW(0));

  ctrl: lcd_ctrl_ent port map(
	clk           => clk,
  reset         => reset_l,

  -- In
  LCD_init_done => init_done,
  OP_SETCURSOR  => tic1,
  OP_DRAWCOLOUR => tic2,
  XCOL          => posi,
  YROW          => '0' & posi,
  RGB           => rgb,
  NUM_PIX       => "0000000000" & unsigned(SW(9 downto 3)),
  
  -- Out

  LCD_CS_N      => cs_n,
  LCD_WR_N      => wr_n,
  LCD_RS        => rs,
  LCD_DATA      => d
	
  );

  
  -- esquema para contador de test
  process (clk, reset)
    begin
      if reset = '0' then ciclos <= (others => '0');
      elsif clk'event and clk='1' then 
        ciclos <= ciclos + 1;
      end if;  
  end process;


   -- esquema para contador de test
   process (clk, reset)
   begin
     if reset = '0' then ciclos <= (others => '0');
     elsif clk'event and clk='1' then 
      if (tic1='1') then
       posi <= posi + 1;
      end if;
     end if;  
 end process;
 tic1 <= '1' when (ciclos = to_unsigned(1,19)) else '0';
 tic2 <= '1' when (ciclos = to_unsigned(262144,19)) else '0';

end rtl;
